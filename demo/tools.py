"""
1. write files
2. read files
3. append contents in files
4. web search for specialized knowledge
"""
import os
import json
from langchain_community.tools.tavily_search import TavilySearchResults

# 定义工作目录
def _get_workdir_root():
  workdir_root = os.environ.get("WORKDIR_ROOT", "./data/llm_result")
  return workdir_root
workdir_root = _get_workdir_root()

def read_file(filename):
    global workdir_root
    filename = os.path.join(workdir_root, filename)
    if not os.path.exists(filename):
        return f'{filename} does not exist, please check whether file exists before read'
    with open(filename, 'r') as f:
        return "\n".join(f.readlines())

def append_to_file(filename, content = "\n"):
  global workdir_root
  filename = os.path.join(workdir_root, filename)
  if not os.path.exists(filename):
    return f'{filename} does not exist, please check whether file exists before append'
  with open(filename, 'a') as f:
    f.write(content)
  return "append content to file successfully!"

def write_file(filename, content = ""):
  global workdir_root
  filename = os.path.join(workdir_root, filename)
  if not os.path.exists(workdir_root):
    os.makedirs(workdir_root)

  with open(filename, 'w') as f:
    f.write(content)
  return "write content to file successfully!"

def search_web(query):
    tavily = TavilySearchResults(max_results=3)
    try:
      ret = tavily.invoke(query)
      """
      ret:
      [{
        "content":"",
        "url":""
      }]
      """
      content_list = [item["content"] for item in ret]
      return "\n".join(content_list)
    except Exception as err:
      return f"search web failed: {err}"
    
tools_info = [
  {
    "name":"read_file",
    "description":"read file generated by agent, should write before read",
    "args":[
      {
        "name":"filename",
        "type":"string",
        "description":"the file name to read"
      }
    ]
  },
  {
    "name":"append_to_file",
    "description":"append content generated by agent to file, should write before read",
    "args":[
      {
        "name":"filename",
        "type":"string",
        "description":"the file name to append"
      },
      {
        "name":"content",
        "type":"string",
        "description":"the content to append"
      }
    ]
  },
  {
    "name":"write_file",
    "description":"write content generated by agent to file, should write before read",
    "args":[
      {
        "name":"filename",
        "type":"string",
        "description":"the file name to write"
      },
      {
        "name":"content",
        "type":"string",
        "description":"the content to write"
      }
    ]
  },
  {
    "name":"search_web",
    "description":"this is a search engine tool, you can search web for additional knowledge when you are unsure about the answer",
    "args":[
      {
        "name":"query",
        "type":"string",
        "description":"the query to search"
      }
    ]
  },
  {
    "name":"finish",
    "description":"if task completed, you can use it to finish the task",
    "args":[
      {
        "name":"answer",
        "type":"string",
        "description":"the task final answer"
      }
    ]
  }
]

tools_map = {
  "read_file": read_file,
  "append_to_file": append_to_file,
  "write_file": write_file,
  "search_web": search_web,
  "finish": None
}

def gen_tools_desc():
  tools_desc = []
  for idx, t in enumerate(tools_info):
    args_desc = []
    for arg in t["args"]:
      args_desc.append({
        "name": arg["name"],
        "description": arg["description"],
        "type": arg["type"]
      })
    args_desc = json.dumps(args_desc, ensure_ascii=False)
    tools_desc.append(f"{idx + 1}. {t['name']}: {t['description']}, args: {args_desc}")
  return "\n".join(tools_desc)